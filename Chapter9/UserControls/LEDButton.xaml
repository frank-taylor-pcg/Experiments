<UserControl
  x:Class="Chapter9.UserControls.LEDButton"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
  xmlns:local="clr-namespace:Chapter9.UserControls"
	xmlns:converters="clr-namespace:Chapter9.Converters"
	mc:Ignorable="d" 
  d:DesignHeight="450" d:DesignWidth="800">
	<ToggleButton>
		<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
			<!-- This style uses the PercentConverter to determine sizes of the various sub-elements. -->
			<Style.Resources>
				<converters:PercentConverter x:Key="PercentConverter" />
			</Style.Resources>

			<!-- LED Buttons will always be 3 state.  We indicate the NULL state when we don't know the state. -->
			<Setter Property="IsThreeState" Value="True" />

			<!-- Define some default values -->
			<Setter Property="Background" Value="LightGray" />
			<Setter Property="Foreground" Value="Black" />
			<Setter Property="BorderBrush" Value="Black" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Width" Value="200" />
			<Setter Property="Height" Value="30" />
			<Setter Property="IsChecked" Value="False" />
			<Setter Property="Content" Value="Unset" />

			<!-- This defines the appearance of the LED Button -->
			<!--
			Note that I'm binding properties of the children (i.e., height and width) to the values of the parents.  I discovered that
			if the parent's property wasn't explicitly defined then I couldn't do this and the results were unpredictable.
			-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ToggleButton">
							<!--ToolTip="{TemplateBinding Content}"-->
						<Border
							x:Name="wrappingBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Width="{TemplateBinding Width}"
							Height="{TemplateBinding Height}">

							<Grid
								x:Name="outerGrid"
								Width="{TemplateBinding Width, Converter={StaticResource PercentConverter}, ConverterParameter=0.98}"
								Height="{TemplateBinding Height, Converter={StaticResource PercentConverter}, ConverterParameter=0.95}">

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<Border
									x:Name="innerBorder"
									Grid.Column="0"
									Width="{Binding ElementName=outerGrid, Path=Height, Converter={StaticResource PercentConverter}, ConverterParameter=1.2}"
									Height="{Binding ElementName=outerGrid, Path=Height, Converter={StaticResource PercentConverter}, ConverterParameter=0.9}"
									CornerRadius="{Binding ElementName=outerGrid, Path=Height, Converter={StaticResource PercentConverter}, ConverterParameter=0.5}">

									<Border.Background>
										<LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
											<GradientStop Color="Black" Offset="0" />
											<GradientStop Color="White" Offset="1" />
										</LinearGradientBrush>
									</Border.Background>

									<Border
										x:Name="sliderBorder"
										Padding="{Binding ElementName=innerBorder, Path=Height, Converter={StaticResource PercentConverter}, ConverterParameter=0.05}"
										Width="{Binding ElementName=innerBorder, Path=Height}"
										Height="{Binding ElementName=innerBorder, Path=Height}"
										HorizontalAlignment="Left">

										<Grid>
											<!-- LED Color -->
											<Ellipse x:Name="colorEllipse" />

											<!-- LED Highlight-->
											<Ellipse>
												<Ellipse.Fill>
													<RadialGradientBrush>
														<RadialGradientBrush.GradientOrigin>
															<Point X="0.3" Y="0.3" />
														</RadialGradientBrush.GradientOrigin>

														<GradientStop Color="White" Offset="0" />
														<GradientStop Color="#00ffffff" Offset="0.25" />
														<GradientStop Color="#00444444" Offset="0.75" />
														<GradientStop Color="#ff444444" Offset="1" />
													</RadialGradientBrush>
												</Ellipse.Fill>
											</Ellipse>
										</Grid>
									</Border>

								</Border>

								<!--Content="{TemplateBinding Content}"-->
								<Label
								Grid.Column="1"
								VerticalAlignment="Center"
								Foreground="{TemplateBinding Foreground}"
								Margin="2,0,0,0"
								Padding="2" />
							</Grid>
						</Border>

						<!-- Modify the color as well as the position of the LED within its slider based on the value of the ToggleButton.IsChecked property -->
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="False">
								<Setter TargetName="sliderBorder" Property="HorizontalAlignment" Value="Left" />
								<Setter TargetName="colorEllipse" Property="Fill" Value="DarkRed" />
							</Trigger>

							<Trigger Property="IsChecked" Value="{x:Null}">
								<Setter TargetName="sliderBorder" Property="HorizontalAlignment" Value="Center" />
								<Setter TargetName="colorEllipse" Property="Fill" Value="DimGray" />
							</Trigger>

							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="sliderBorder" Property="HorizontalAlignment" Value="Right" />
								<Setter TargetName="colorEllipse" Property="Fill" Value="Green" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>

		</Style>
	</ToggleButton>

</UserControl>
